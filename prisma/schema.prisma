<<<<<<< HEAD

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
=======
generator client {
  provider = "prisma-client-js"
>>>>>>> origin/master
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions Session[]
  accounts Account[]
  favoriteIds String[] @db.ObjectId
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
=======
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  image           String?
  email           String?     @unique
  emailVerified   DateTime?
  hashedPassword  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  sessions        Session[]
  accounts        Account[]
  favoriteIds     String[]    @db.ObjectId
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
>>>>>>> origin/master
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
<<<<<<< HEAD
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
=======
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken  String    @unique
  userId        String    @db.ObjectId
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String    @unique
  expires     DateTime
>>>>>>> origin/master

  @@unique([identifier, token])
}

model Movie {
<<<<<<< HEAD
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
}

=======
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  videoUrl      String
  thumbnailUrl  String
  genre         String
  duration      String
}
>>>>>>> origin/master
